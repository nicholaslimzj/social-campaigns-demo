version: 2

models:
  - name: segment_company_historical_rankings
    description: |
      Ranks companies within each customer segment based on historical performance metrics (Conversion Rate, ROI, Acquisition Cost, CTR) across all available campaign data.
      This model identifies top-performing companies for specific segments, calculates relative performance against segment and global averages, and provides context like campaign volume and total companies per segment.
      It serves dashboards related to segment performance, company-segment affinity, and targeting strategy.
    config:
      materialized: table
      tags: ['mart']
    columns:
      - name: Customer_Segment
        description: "The customer segment being analyzed. Grouping key for ranking and comparison."
        tests:
          - not_null
          # Test for the multi-column unique constraint (Primary Key)
          - dbt_utils.unique_combination_of_columns:
              combination_of_columns:
                - Customer_Segment
                - Company
          - relationships:
              to: ref('stg_campaigns')
              field: Customer_Segment # Assumes Customer_Segment exists and is valid in stg_campaigns
              description: "Ensures the customer segment exists in the source campaign data."

      - name: Company
        description: "The company whose performance is being analyzed within the segment. Grouping key for ranking and comparison."
        tests:
          - not_null
          - relationships:
              to: ref('stg_campaigns')
              field: Company # Assumes Company exists and is valid in stg_campaigns
              description: "Ensures the company exists in the source campaign data."

      - name: avg_conversion_rate
        description: "Average conversion rate achieved by this company within this segment across all historical campaigns."
        tests:
          - not_null
          # Optional: Add range check if applicable, e.g., >= 0
          # - dbt_expectations.expect_column_values_to_be_between:
          #     min_value: 0
          #     # max_value: 1 # Or higher if rate can exceed 100%

      - name: avg_roi
        description: "Average Return on Investment (ROI) generated by this company within this segment across all historical campaigns."
        tests:
          - not_null
          # ROI can be negative, so a simple lower bound might be tricky

      - name: avg_acquisition_cost
        description: "Average cost to acquire a customer or achieve a conversion for this company within this segment across all historical campaigns. Lower is generally better."
        tests:
          - not_null
          # Optional: Add range check if applicable, e.g., >= 0
          # - dbt_expectations.expect_column_values_to_be_non_negative

      - name: overall_ctr
        description: "Overall Click-Through Rate (CTR = Clicks / Impressions) for this company within this segment across all historical campaigns."
        tests:
          - not_null
          # Optional: Add range check if applicable, e.g., >= 0 and <= 1
          # - dbt_expectations.expect_column_values_to_be_between:
          #     min_value: 0
          #     max_value: 1

      - name: campaign_count
        description: "The total number of campaigns run by this company within this segment included in the historical analysis."
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_positive:
              description: "Campaign count should always be greater than zero for a segment-company combination to appear."

      - name: conversion_rate_rank
        description: "Rank of the company within the segment based on average conversion rate (1 = highest conversion rate)."
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_positive:
              description: "Rank must be a positive integer."

      - name: roi_rank
        description: "Rank of the company within the segment based on average ROI (1 = highest ROI)."
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_positive:
              description: "Rank must be a positive integer."

      - name: acquisition_cost_rank
        description: "Rank of the company within the segment based on average acquisition cost (1 = lowest acquisition cost)."
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_positive:
              description: "Rank must be a positive integer."

      - name: ctr_rank
        description: "Rank of the company within the segment based on overall CTR (1 = highest CTR)."
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_positive:
              description: "Rank must be a positive integer."

      - name: total_companies_per_segment
        description: "Total number of unique companies analyzed within this customer segment."
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_positive:
              description: "There should be at least one company per segment."

      - name: is_top_conversion_company
        description: "Boolean flag (TRUE/FALSE) indicating if this company has the highest average conversion rate (rank=1) in the segment."
        tests:
          - not_null
          - accepted_values:
              values: [ True, False ]

      - name: is_top_roi_company
        description: "Boolean flag (TRUE/FALSE) indicating if this company has the highest average ROI (rank=1) in the segment."
        tests:
          - not_null
          - accepted_values:
              values: [ True, False ]

      - name: is_top_acquisition_cost_company
        description: "Boolean flag (TRUE/FALSE) indicating if this company has the lowest average acquisition cost (rank=1) in the segment."
        tests:
          - not_null
          - accepted_values:
              values: [ True, False ]

      - name: is_top_ctr_company
        description: "Boolean flag (TRUE/FALSE) indicating if this company has the highest overall CTR (rank=1) in the segment."
        tests:
          - not_null
          - accepted_values:
              values: [ True, False ]

      - name: segment_avg_conversion_rate
        description: "Average conversion rate across all companies within this specific customer segment, used for comparison."
        tests:
          - not_null

      - name: segment_avg_roi
        description: "Average ROI across all companies within this specific customer segment, used for comparison."
        tests:
          - not_null

      - name: segment_avg_acquisition_cost
        description: "Average acquisition cost across all companies within this specific customer segment, used for comparison."
        tests:
          - not_null

      - name: segment_avg_ctr
        description: "Average overall CTR across all companies within this specific customer segment, used for comparison."
        tests:
          - not_null

      - name: company_count
        description: "The total number of unique companies within this customer segment (calculated alongside segment averages)."
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_positive:
              description: "There should be at least one company per segment."
          # Optional: Test if this matches total_companies_per_segment
          # - dbt_expectations.expect_column_pair_values_to_be_equal:
          #     column_A: company_count
          #     column_B: total_companies_per_segment

      - name: conversion_rate_vs_segment_avg
        description: "Relative performance indicator: Percentage difference between the company's average conversion rate and the segment's average. Positive values indicate better-than-average performance."
        # No not_null test needed as division by zero (handled by NULLIF) can result in NULL.

      - name: roi_vs_segment_avg
        description: "Relative performance indicator: Percentage difference between the company's average ROI and the segment's average. Positive values indicate better-than-average performance."
        # No not_null test needed as division by zero (handled by NULLIF) can result in NULL.

      - name: acquisition_cost_vs_segment_avg
        description: "Relative performance indicator: Percentage difference showing how much better (positive) or worse (negative) the company's acquisition cost is compared to the segment average (calculated as segment_avg / company_avg - 1). Positive values indicate better-than-average (lower) cost."
        # No not_null test needed as division by zero (handled by NULLIF) can result in NULL.

      - name: ctr_vs_segment_avg
        description: "Relative performance indicator: Percentage difference between the company's overall CTR and the segment's average. Positive values indicate better-than-average performance."
        # No not_null test needed as division by zero (handled by NULLIF) can result in NULL.

      - name: conversion_rate_vs_global_avg
        description: "Relative performance indicator: Percentage difference between the company's average conversion rate and the global average across all segments/companies."
        # No not_null test needed as division by zero (handled by NULLIF) can result in NULL.

      - name: roi_vs_global_avg
        description: "Relative performance indicator: Percentage difference between the company's average ROI and the global average across all segments/companies."
        # No not_null test needed as division by zero (handled by NULLIF) can result in NULL.

      - name: acquisition_cost_vs_global_avg
        description: "Relative performance indicator: Percentage difference showing how much better (positive) or worse (negative) the company's acquisition cost is compared to the global average (calculated as global_avg / company_avg - 1)."
        # No not_null test needed as division by zero (handled by NULLIF) can result in NULL.

      - name: ctr_vs_global_avg
        description: "Relative performance indicator: Percentage difference between the company's overall CTR and the global average across all segments/companies."
        # No not_null test needed as division by zero (handled by NULLIF) can result in NULL.