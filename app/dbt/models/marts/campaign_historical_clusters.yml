version: 2

models:
  - name: campaign_historical_clusters
    description: |
      Identifies high-performing campaign combinations (clusters) across all historical data.
      This model groups campaigns by Goal, Segment, Channel, and Duration Bucket, calculates aggregate performance metrics for each combination,
      ranks them based on various KPIs (ROI, Conversion Rate, Acquisition Cost, CTR), calculates a composite performance score,
      determines the optimal duration range for each Goal-Segment-Channel group based on ROI, and flags the top-performing combinations ('winning combinations').
      It supports analysis for campaign optimization and dashboard reporting. The analysis considers only combinations with at least 3 campaigns for statistical significance.
    config:
      materialized: table
      tags: ['mart', 'marketing', 'campaign_performance', 'optimization', 'historical']
    columns:
      - name: Company
        description: "Identifier for the company associated with the campaign combination."
        data_type: VARCHAR
        tests:
          - not_null
          # Apply the unique combination test to one of the key columns
          - dbt_utils.unique_combination_of_columns:
              combination_of_columns:
                - Company
                - goal
                - segment
                - channel
                - duration_bucket
          - relationships:
              to: ref('stg_campaigns')
              field: Company # Assuming 'Company' exists in stg_campaigns

      - name: goal
        description: "The primary objective (e.g., 'Increase Sales', 'Brand Awareness') of the campaigns within this combination."
        data_type: VARCHAR
        tests:
          - not_null
          - relationships: # Check if goal exists in the staging layer
              to: ref('stg_campaigns')
              field: Campaign_Goal # Assuming this is the corresponding column name

      - name: segment
        description: "The target customer segment (e.g., 'Fashion', 'Tech Enthusiasts') for the campaigns within this combination."
        data_type: VARCHAR
        tests:
          - not_null
          - relationships: # Check if segment exists in the staging layer
              to: ref('stg_campaigns')
              field: Customer_Segment # Assuming this is the corresponding column name

      - name: channel
        description: "The marketing channel (e.g., 'Facebook', 'Google Ads', 'Email') used for the campaigns within this combination."
        data_type: VARCHAR
        tests:
          - not_null
          - relationships: # Check if channel exists in the staging layer
              to: ref('stg_campaigns')
              field: Channel_Used # Assuming this is the corresponding column name

      - name: duration_bucket
        description: "The duration category (e.g., '1-7 days', '8-14 days') into which the campaigns within this combination fall."
        data_type: VARCHAR
        tests:
          - not_null
          - accepted_values:
              values: ['1-7 days', '8-14 days', '15-21 days', '22-30 days', '31-45 days', '46-60 days', '60+ days']

      - name: avg_conversion_rate
        description: "The average conversion rate achieved by campaigns within this specific combination."
        data_type: DOUBLE
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              # Max value can theoretically exceed 1 in some contexts, but typically not. Adjust if needed.
              # max_value: 1

      - name: avg_roi
        description: "The average Return on Investment (ROI) achieved by campaigns within this specific combination."
        data_type: DOUBLE
        tests:
          - not_null

      - name: avg_acquisition_cost
        description: "The average cost to acquire a customer (Acquisition Cost) for campaigns within this specific combination."
        data_type: DOUBLE
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0

      - name: avg_ctr
        description: "The average Click-Through Rate (CTR) achieved by campaigns within this specific combination."
        data_type: FLOAT # Note: SQL uses FLOAT, YAML uses FLOAT
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              # max_value: 1 # CTR is typically between 0 and 1

      - name: campaign_count
        description: "The total number of individual campaigns included in this specific combination (minimum 3)."
        data_type: BIGINT
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 3 # Based on HAVING clause

      - name: min_duration
        description: "The minimum duration (in days) among campaigns within this specific combination."
        data_type: BIGINT
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1

      - name: max_duration
        description: "The maximum duration (in days) among campaigns within this specific combination."
        data_type: BIGINT
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1

      - name: avg_duration
        description: "The average duration (in days) of campaigns within this specific combination."
        data_type: DOUBLE
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1

      - name: conversion_rate_vs_company
        description: "Ratio comparing this combination's average conversion rate to the company's overall average conversion rate across all combinations (Value > 1 means better than company average)."
        data_type: DOUBLE
        tests:
          - not_null

      - name: roi_vs_company
        description: "Ratio comparing this combination's average ROI to the company's overall average ROI across all combinations (Value > 1 means better than company average)."
        data_type: DOUBLE
        tests:
          - not_null

      - name: acquisition_cost_vs_company
        description: "Ratio comparing the company's overall average acquisition cost to this combination's average acquisition cost (Value > 1 means lower/better cost than company average)."
        data_type: DOUBLE
        tests:
          - not_null

      - name: ctr_vs_company
        description: "Ratio comparing this combination's average CTR to the company's overall average CTR across all combinations (Value > 1 means better than company average)."
        data_type: DOUBLE
        tests:
          - not_null

      - name: conversion_rate_vs_global
        description: "Ratio comparing this combination's average conversion rate to the global average conversion rate across all companies and combinations (Value > 1 means better than global average)."
        data_type: DOUBLE
        tests:
          - not_null

      - name: roi_vs_global
        description: "Ratio comparing this combination's average ROI to the global average ROI across all companies and combinations (Value > 1 means better than global average)."
        data_type: DOUBLE
        tests:
          - not_null

      - name: acquisition_cost_vs_global
        description: "Ratio comparing the global average acquisition cost to this combination's average acquisition cost (Value > 1 means lower/better cost than global average)."
        data_type: DOUBLE
        tests:
          - not_null

      - name: ctr_vs_global
        description: "Ratio comparing this combination's average CTR to the global average CTR across all companies and combinations (Value > 1 means better than global average)."
        data_type: DOUBLE
        tests:
          - not_null

      - name: conversion_rate_rank
        description: "Rank of this combination within the company based on average conversion rate (1 = highest conversion rate)."
        data_type: BIGINT
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1

      - name: roi_rank
        description: "Rank of this combination within the company based on average ROI (1 = highest ROI)."
        data_type: BIGINT
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1

      - name: acquisition_cost_rank
        description: "Rank of this combination within the company based on average acquisition cost (1 = lowest acquisition cost)."
        data_type: BIGINT
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1

      - name: ctr_rank
        description: "Rank of this combination within the company based on average CTR (1 = highest CTR)."
        data_type: BIGINT
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1

      - name: composite_rank
        description: "Overall rank of this combination within the company based on the weighted composite score (1 = best overall performance)."
        data_type: BIGINT
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1

      - name: composite_score
        description: "Weighted score reflecting overall performance, calculated from individual metric ranks (lower score indicates better performance). Weights: ROI (0.4), Conversion Rate (0.3), Acquisition Cost (0.2), CTR (0.1)."
        # Note: DECIMAL(24,1) is specific. dbt typically uses standard types like numeric or float.
        # Using 'numeric' as a general representation, adjust if your adapter needs DECIMAL.
        data_type: DECIMAL(24,1) # Or use 'numeric' if DECIMAL isn't directly supported/needed in schema.yml
        tests:
          - not_null

      - name: optimal_duration_bucket
        description: "The duration bucket identified as having the highest average ROI for this specific Company-Goal-Segment-Channel group, irrespective of the current row's duration bucket."
        data_type: VARCHAR
        tests:
          - not_null
          - accepted_values:
              values: ['1-7 days', '8-14 days', '15-21 days', '22-30 days', '31-45 days', '46-60 days', '60+ days']

      - name: optimal_min_duration
        description: "The minimum duration (in days) associated with the optimal duration bucket for this Company-Goal-Segment-Channel group."
        data_type: BIGINT
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1

      - name: optimal_max_duration
        description: "The maximum duration (in days) associated with the optimal duration bucket for this Company-Goal-Segment-Channel group."
        data_type: BIGINT
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1

      - name: is_winning_combination
        description: "Boolean flag indicating if this combination ranks within the top 10% by composite score within its company (TRUE if winning, FALSE otherwise)."
        data_type: BOOLEAN
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      - name: is_optimal_duration
        description: "Boolean flag indicating if this combination's duration bucket matches the identified optimal duration bucket for its Company-Goal-Segment-Channel group (TRUE if it matches, FALSE otherwise)."
        data_type: BOOLEAN
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      - name: optimal_duration_range
        description: "A user-friendly string representing the optimal duration range (e.g., '15-21 days') based on the optimal min/max duration for this Company-Goal-Segment-Channel group."
        data_type: VARCHAR
        tests:
          - not_null