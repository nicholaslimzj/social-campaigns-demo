version: '3.8'

services:
  app:
    build: .
    networks:
      - meta-demo-network
    volumes:
      # Mount the code directory
      - ./app:/app
      # Mount data directories at the root level to match local structure
      - ./data:/data
      - ./dataset:/dataset
      # Mount requirements and entrypoint files
      - ./requirements.txt:/requirements.txt
      - ./requirements-dev.txt:/requirements-dev.txt
      - ./entrypoint.sh:/entrypoint.sh
      - ./index.py:/index.py
      # Mount environment files
      - ./.env:/.env
      - ./.env.development:/.env.development
      - ./.env.production:/.env.production
      # Create named volumes for dependency caching
      - python-packages:/usr/local/lib/python3.10/site-packages
      - pip-cache:/root/.cache/pip
    environment:
      # Base configuration
      - PYTHONPATH=/
      - ENVIRONMENT=development
      
      # Vanna configuration
      - VANNA_MODEL=gemini-1.5-pro-002
      - VANNA_TEMPERATURE=0.2
      
      # The API key should come from .env file for security
      # - GOOGLE_API_KEY=your_api_key
    ports:
      # Expose ports for any web services we might add
      - "8050:8050"  # For Dash/Plotly dashboard
      - "8501:8501"  # For Streamlit (if used)
      - "5000:5000"  # For Flask API server
    # Enable interactive terminal
    stdin_open: true
    tty: true
    
  dbt:
    # Use the same image as the app service
    build: .
    # This prevents the service from starting with docker-compose up (without specifying services)
    profiles: ["dbt"]
    networks:
      - meta-demo-network
    environment:
      - PYTHONPATH=/
      - ENVIRONMENT=development
      - DBT_PROFILES_DIR=/app/dbt
      # Set to true to prevent web server from starting
      - STANDBY_MODE=true
    volumes:
      # Mount the same volumes as the app service
      - ./app:/app
      - ./data:/data
      - ./dataset:/dataset
      - ./requirements.txt:/requirements.txt
      - ./requirements-dev.txt:/requirements-dev.txt
      - ./entrypoint.sh:/entrypoint.sh
      - ./index.py:/index.py
      - ./.env:/.env
      - ./.env.development:/.env.development
      - ./.env.production:/.env.production
      # Use the same dependency caching
      - python-packages:/usr/local/lib/python3.10/site-packages
      - pip-cache:/root/.cache/pip
    # Keep container running without starting the web server
    stdin_open: true
    tty: true

  # Note: We're using DuckDB directly in our application code
  # instead of as a separate service

volumes:
  python-packages:  # Persistent volume for Python packages
  pip-cache:        # Persistent volume for pip cache

# Define a named network that won't be automatically removed
networks:
  meta-demo-network:
    name: meta-demo-network
